// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: redchain/gate/packet.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GatePacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*GatePacketData_NoData
	//	*GatePacketData_DustpacketPacket
	Packet isGatePacketData_Packet `protobuf_oneof:"packet"`
}

func (m *GatePacketData) Reset()         { *m = GatePacketData{} }
func (m *GatePacketData) String() string { return proto.CompactTextString(m) }
func (*GatePacketData) ProtoMessage()    {}
func (*GatePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b84687eb7dd94ea1, []int{0}
}
func (m *GatePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatePacketData.Merge(m, src)
}
func (m *GatePacketData) XXX_Size() int {
	return m.Size()
}
func (m *GatePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_GatePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_GatePacketData proto.InternalMessageInfo

type isGatePacketData_Packet interface {
	isGatePacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GatePacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type GatePacketData_DustpacketPacket struct {
	DustpacketPacket *DustpacketPacketData `protobuf:"bytes,2,opt,name=dustpacketPacket,proto3,oneof" json:"dustpacketPacket,omitempty"`
}

func (*GatePacketData_NoData) isGatePacketData_Packet()           {}
func (*GatePacketData_DustpacketPacket) isGatePacketData_Packet() {}

func (m *GatePacketData) GetPacket() isGatePacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *GatePacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*GatePacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *GatePacketData) GetDustpacketPacket() *DustpacketPacketData {
	if x, ok := m.GetPacket().(*GatePacketData_DustpacketPacket); ok {
		return x.DustpacketPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatePacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatePacketData_NoData)(nil),
		(*GatePacketData_DustpacketPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b84687eb7dd94ea1, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// DustpacketPacketData defines a struct for the packet payload
type DustpacketPacketData struct {
	RouteAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient  []byte                                 `protobuf:"bytes,2,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	DestChainId     string                                 `protobuf:"bytes,3,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestMetadata []byte                                 `protobuf:"bytes,4,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	RequestPacket   []byte                                 `protobuf:"bytes,5,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	SenderAddress   []byte                                 `protobuf:"bytes,6,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *DustpacketPacketData) Reset()         { *m = DustpacketPacketData{} }
func (m *DustpacketPacketData) String() string { return proto.CompactTextString(m) }
func (*DustpacketPacketData) ProtoMessage()    {}
func (*DustpacketPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b84687eb7dd94ea1, []int{2}
}
func (m *DustpacketPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DustpacketPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DustpacketPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DustpacketPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DustpacketPacketData.Merge(m, src)
}
func (m *DustpacketPacketData) XXX_Size() int {
	return m.Size()
}
func (m *DustpacketPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_DustpacketPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_DustpacketPacketData proto.InternalMessageInfo

func (m *DustpacketPacketData) GetRouteRecipient() []byte {
	if m != nil {
		return m.RouteRecipient
	}
	return nil
}

func (m *DustpacketPacketData) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *DustpacketPacketData) GetRequestMetadata() []byte {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *DustpacketPacketData) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *DustpacketPacketData) GetSenderAddress() []byte {
	if m != nil {
		return m.SenderAddress
	}
	return nil
}

// DustpacketPacketAck defines a struct for the packet acknowledgment
type DustpacketPacketAck struct {
}

func (m *DustpacketPacketAck) Reset()         { *m = DustpacketPacketAck{} }
func (m *DustpacketPacketAck) String() string { return proto.CompactTextString(m) }
func (*DustpacketPacketAck) ProtoMessage()    {}
func (*DustpacketPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_b84687eb7dd94ea1, []int{3}
}
func (m *DustpacketPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DustpacketPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DustpacketPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DustpacketPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DustpacketPacketAck.Merge(m, src)
}
func (m *DustpacketPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *DustpacketPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DustpacketPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_DustpacketPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GatePacketData)(nil), "redchain.gate.GatePacketData")
	proto.RegisterType((*NoData)(nil), "redchain.gate.NoData")
	proto.RegisterType((*DustpacketPacketData)(nil), "redchain.gate.DustpacketPacketData")
	proto.RegisterType((*DustpacketPacketAck)(nil), "redchain.gate.DustpacketPacketAck")
}

func init() { proto.RegisterFile("redchain/gate/packet.proto", fileDescriptor_b84687eb7dd94ea1) }

var fileDescriptor_b84687eb7dd94ea1 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x4e, 0xeb, 0x30,
	0x10, 0xc7, 0x93, 0xbe, 0xf7, 0xa2, 0x3e, 0xf7, 0x53, 0xa6, 0x95, 0xa2, 0x2e, 0x52, 0x14, 0xc4,
	0xd7, 0x82, 0x44, 0x82, 0x13, 0xb4, 0x54, 0x82, 0x2e, 0x40, 0x34, 0x4b, 0x36, 0x91, 0x1b, 0x5b,
	0x69, 0x54, 0x25, 0x0e, 0xb6, 0x23, 0xc1, 0x2d, 0x38, 0x01, 0x57, 0xe0, 0x1a, 0x5d, 0x76, 0x89,
	0x58, 0x54, 0xa8, 0xbd, 0x08, 0xb2, 0x9d, 0x22, 0x51, 0x58, 0x65, 0xf2, 0x9b, 0xff, 0xfc, 0xc7,
	0x33, 0x1a, 0xd0, 0x63, 0x04, 0x47, 0x33, 0x94, 0x64, 0x7e, 0x8c, 0x04, 0xf1, 0x73, 0x14, 0xcd,
	0x89, 0xf0, 0x72, 0x46, 0x05, 0x85, 0x8d, 0x6d, 0xce, 0x93, 0xb9, 0x5e, 0x27, 0xa6, 0x31, 0x55,
	0x19, 0x5f, 0x46, 0x5a, 0xe4, 0xbe, 0x98, 0xa0, 0x79, 0x85, 0x04, 0xb9, 0x53, 0x95, 0x23, 0x24,
	0x10, 0xf4, 0x81, 0x95, 0x51, 0x19, 0xd9, 0xe6, 0xbe, 0x79, 0x52, 0x3b, 0xef, 0x7a, 0xdf, 0x8c,
	0xbc, 0x5b, 0x95, 0xbc, 0x36, 0x82, 0x52, 0x06, 0x27, 0xa0, 0x8d, 0x0b, 0x2e, 0x74, 0x73, 0x6d,
	0x64, 0x57, 0x54, 0xe9, 0xc1, 0x4e, 0xe9, 0x68, 0x47, 0x56, 0x1a, 0xfd, 0x28, 0x1f, 0x56, 0x81,
	0xa5, 0xff, 0xdd, 0x2a, 0xb0, 0x74, 0x43, 0xf7, 0xb5, 0x02, 0x3a, 0xbf, 0x19, 0xc0, 0x09, 0xa8,
	0x33, 0x5a, 0x08, 0x12, 0xa2, 0x94, 0x16, 0x99, 0x50, 0xcf, 0xfe, 0x3f, 0xf4, 0x16, 0xab, 0xbe,
	0xf1, 0xbe, 0xea, 0x1f, 0xc5, 0x89, 0x98, 0x15, 0x53, 0x2f, 0xa2, 0xa9, 0x1f, 0x51, 0x9e, 0x52,
	0x5e, 0x7e, 0xce, 0x38, 0x9e, 0xfb, 0xe2, 0x29, 0x27, 0xdc, 0x1b, 0x67, 0x22, 0xa8, 0x29, 0x8f,
	0x81, 0xb2, 0x80, 0xc7, 0xa0, 0xa5, 0x2d, 0x19, 0x89, 0x92, 0x3c, 0x21, 0x99, 0x9e, 0xa8, 0x1e,
	0x34, 0x15, 0x0e, 0xb6, 0x14, 0xba, 0xa0, 0x81, 0x09, 0x17, 0xa1, 0x1a, 0x32, 0x4c, 0xb0, 0xfd,
	0x47, 0x36, 0x0f, 0x6a, 0x12, 0x5e, 0x4a, 0x36, 0xc6, 0xf0, 0x14, 0xb4, 0x19, 0x79, 0x28, 0xa4,
	0x2c, 0x25, 0x02, 0x61, 0xb9, 0xda, 0xbf, 0xca, 0xad, 0x55, 0xf2, 0x9b, 0x12, 0xc3, 0x43, 0xd0,
	0xdc, 0x4a, 0xf5, 0x98, 0xf6, 0x3f, 0x25, 0x6c, 0x94, 0x54, 0x4f, 0x2d, 0x65, 0x9c, 0x64, 0x98,
	0xb0, 0x10, 0x61, 0xcc, 0x08, 0xe7, 0xb6, 0xa5, 0x65, 0x9a, 0x0e, 0x34, 0x74, 0xbb, 0x60, 0x6f,
	0x77, 0x61, 0x83, 0x68, 0x3e, 0xf4, 0x17, 0x6b, 0xc7, 0x5c, 0xae, 0x1d, 0xf3, 0x63, 0xed, 0x98,
	0xcf, 0x1b, 0xc7, 0x58, 0x6e, 0x1c, 0xe3, 0x6d, 0xe3, 0x18, 0xf7, 0xdd, 0xaf, 0x73, 0x7a, 0xd4,
	0x07, 0xa5, 0xd6, 0x33, 0xb5, 0xd4, 0xad, 0x5c, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xe0,
	0x06, 0xfc, 0x6e, 0x02, 0x00, 0x00,
}

func (m *GatePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatePacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatePacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GatePacketData_DustpacketPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatePacketData_DustpacketPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DustpacketPacket != nil {
		{
			size, err := m.DustpacketPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DustpacketPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DustpacketPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DustpacketPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestMetadata) > 0 {
		i -= len(m.RequestMetadata)
		copy(dAtA[i:], m.RequestMetadata)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.RequestMetadata)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DustpacketPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DustpacketPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DustpacketPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GatePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *GatePacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *GatePacketData_DustpacketPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DustpacketPacket != nil {
		l = m.DustpacketPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DustpacketPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RouteAmount.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.RequestMetadata)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *DustpacketPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GatePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &GatePacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustpacketPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DustpacketPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &GatePacketData_DustpacketPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DustpacketPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DustpacketPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DustpacketPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = append(m.RouteRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteRecipient == nil {
				m.RouteRecipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestMetadata = append(m.RequestMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestMetadata == nil {
				m.RequestMetadata = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = append(m.SenderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderAddress == nil {
				m.SenderAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DustpacketPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DustpacketPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DustpacketPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
